package com.yxrobot.interceptor;

import com.yxrobot.service.PerformanceMonitorService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * 性能监控拦截器
 * 任务11：性能优化和错误处理 - 确保系统稳定性
 * 
 * 核心功能：
 * - 自动监控所有API请求的响应时间
 * - 记录慢查询和错误请求
 * - 收集性能统计数据
 * - 提供性能报警机制
 * 
 * @author YXRobot开发团队
 * @version 1.0.0
 * @since 2025-01-27
 */
@Component
public class PerformanceMonitorInterceptor implements HandlerInterceptor {
    
    private static final Logger logger = LoggerFactory.getLogger(PerformanceMonitorInterceptor.class);
    
    private static final String START_TIME_ATTRIBUTE = "startTime";
    private static final String API_PATH_ATTRIBUTE = "apiPath";
    
    @Autowired
    private PerformanceMonitorService performanceMonitorService;
    
    /**
     * 请求开始前的处理
     */
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        // 记录请求开始时间
        long startTime = System.currentTimeMillis();
        request.setAttribute(START_TIME_ATTRIBUTE, startTime);
        
        // 记录API路径
        String apiPath = getApiPath(request);
        request.setAttribute(API_PATH_ATTRIBUTE, apiPath);
        
        // 记录请求开始日志（仅对销售模块API）
        if (isSalesModuleApi(apiPath)) {
            logger.debug("API请求开始: {} {} - {}", request.getMethod(), apiPath, startTime);
        }
        
        return true;
    }
    
    /**
     * 请求完成后的处理
     */
    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, 
                               Object handler, Exception ex) throws Exception {
        try {
            // 获取请求开始时间
            Long startTime = (Long) request.getAttribute(START_TIME_ATTRIBUTE);
            if (startTime == null) {
                return;
            }
            
            // 计算响应时间
            long responseTime = System.currentTimeMillis() - startTime;
            
            // 获取API路径
            String apiPath = (String) request.getAttribute(API_PATH_ATTRIBUTE);
            if (apiPath == null) {
                apiPath = getApiPath(request);
            }
            
            // 只监控销售模块的API
            if (!isSalesModuleApi(apiPath)) {
                return;
            }
            
            // 判断是否发生错误
            boolean isError = (ex != null) || (response.getStatus() >= 400);
            String errorMessage = null;
            
            if (ex != null) {
                errorMessage = ex.getMessage();
            } else if (response.getStatus() >= 400) {
                errorMessage = "HTTP " + response.getStatus();
            }
            
            // 记录性能数据
            performanceMonitorService.recordApiPerformance(
                apiPath, 
                request.getMethod(), 
                responseTime, 
                isError, 
                errorMessage
            );
            
            // 记录详细日志
            if (isError) {
                logger.warn("API请求完成(错误): {} {} - 响应时间: {}ms, 状态码: {}, 错误: {}", 
                           request.getMethod(), apiPath, responseTime, response.getStatus(), errorMessage);
            } else if (responseTime > 2000) {
                logger.warn("API请求完成(慢查询): {} {} - 响应时间: {}ms", 
                           request.getMethod(), apiPath, responseTime);
            } else {
                logger.debug("API请求完成: {} {} - 响应时间: {}ms", 
                            request.getMethod(), apiPath, responseTime);
            }
            
        } catch (Exception e) {
            logger.error("性能监控拦截器处理异常", e);
        }
    }
    
    /**
     * 获取API路径
     */
    private String getApiPath(HttpServletRequest request) {
        String contextPath = request.getContextPath();
        String requestURI = request.getRequestURI();
        
        if (contextPath != null && requestURI.startsWith(contextPath)) {
            return requestURI.substring(contextPath.length());
        }
        
        return requestURI;
    }
    
    /**
     * 判断是否为销售模块API
     */
    private boolean isSalesModuleApi(String apiPath) {
        return apiPath != null && (
            apiPath.startsWith("/api/sales/") ||
            apiPath.startsWith("/api/sales-") ||
            apiPath.contains("/sales/")
        );
    }
}