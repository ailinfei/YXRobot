<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yxrobot.mapper.NewsMapper">

    <!-- 结果映射 -->
    <resultMap id="NewsResultMap" type="com.yxrobot.entity.News">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="excerpt" property="excerpt" jdbcType="VARCHAR"/>
        <result column="content" property="content" jdbcType="LONGVARCHAR"/>
        <result column="category_id" property="categoryId" jdbcType="BIGINT"/>
        <result column="author" property="author" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="VARCHAR" typeHandler="com.yxrobot.handler.NewsStatusTypeHandler"/>
        <result column="cover_image" property="coverImage" jdbcType="VARCHAR"/>
        <result column="publish_time" property="publishTime" jdbcType="TIMESTAMP"/>
        <result column="views" property="views" jdbcType="INTEGER"/>
        <result column="comments" property="comments" jdbcType="INTEGER"/>
        <result column="likes" property="likes" jdbcType="INTEGER"/>
        <result column="is_featured" property="isFeatured" jdbcType="TINYINT"/>
        <result column="sort_order" property="sortOrder" jdbcType="INTEGER"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP"/>
        <result column="is_deleted" property="isDeleted" jdbcType="TINYINT"/>
    </resultMap>

    <!-- 包含分类信息的结果映射 -->
    <resultMap id="NewsWithCategoryResultMap" type="com.yxrobot.entity.News" extends="NewsResultMap">
        <association property="category" javaType="com.yxrobot.entity.NewsCategory">
            <id column="category_id" property="id" jdbcType="BIGINT"/>
            <result column="category_name" property="name" jdbcType="VARCHAR"/>
            <result column="category_description" property="description" jdbcType="VARCHAR"/>
        </association>
    </resultMap>

    <!-- 包含分类和标签信息的结果映射 -->
    <resultMap id="NewsWithDetailsResultMap" type="com.yxrobot.entity.News" extends="NewsWithCategoryResultMap">
        <collection property="tags" ofType="com.yxrobot.entity.NewsTag">
            <id column="tag_id" property="id" jdbcType="BIGINT"/>
            <result column="tag_name" property="name" jdbcType="VARCHAR"/>
            <result column="tag_color" property="color" jdbcType="VARCHAR"/>
        </collection>
    </resultMap>

    <!-- 基础字段 -->
    <sql id="Base_Column_List">
        id, title, excerpt, content, category_id, author, status, cover_image, 
        publish_time, views, comments, likes, is_featured, sort_order, 
        created_at, updated_at, is_deleted
    </sql>

    <!-- 包含分类信息的字段 -->
    <sql id="News_With_Category_Column_List">
        n.id, n.title, n.excerpt, n.content, n.category_id, n.author, n.status, n.cover_image,
        n.publish_time, n.views, n.comments, n.likes, n.is_featured, n.sort_order,
        n.created_at, n.updated_at, n.is_deleted,
        c.name as category_name, c.description as category_description
    </sql>

    <!-- 通用查询条件 -->
    <sql id="Common_Where_Clause">
        <where>
            <if test="conditions.title != null and conditions.title != ''">
                AND title LIKE CONCAT('%', #{conditions.title}, '%')
            </if>
            <if test="conditions.author != null and conditions.author != ''">
                AND author = #{conditions.author}
            </if>
            <if test="conditions.status != null">
                AND status = #{conditions.status}
            </if>
            <if test="conditions.categoryId != null">
                AND category_id = #{conditions.categoryId}
            </if>
            <if test="conditions.isFeatured != null">
                AND is_featured = #{conditions.isFeatured}
            </if>
            <if test="conditions.startDate != null">
                AND created_at >= #{conditions.startDate}
            </if>
            <if test="conditions.endDate != null">
                AND created_at &lt;= #{conditions.endDate}
            </if>
            <if test="conditions.keyword != null and conditions.keyword != ''">
                AND (title LIKE CONCAT('%', #{conditions.keyword}, '%') 
                     OR content LIKE CONCAT('%', #{conditions.keyword}, '%'))
            </if>
            AND is_deleted = 0
        </where>
    </sql>

    <!-- 插入新闻 -->
    <insert id="insert" parameterType="com.yxrobot.entity.News" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO news (
            title, excerpt, content, category_id, author, status, cover_image,
            publish_time, views, comments, likes, is_featured, sort_order,
            created_at, updated_at, is_deleted
        ) VALUES (
            #{title}, #{excerpt}, #{content}, #{categoryId}, #{author}, #{status}, #{coverImage},
            #{publishTime}, #{views}, #{comments}, #{likes}, #{isFeatured}, #{sortOrder},
            NOW(), NOW(), #{isDeleted}
        )
    </insert>

    <!-- 根据ID删除新闻（物理删除） -->
    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM news WHERE id = #{id}
    </delete>

    <!-- 根据ID软删除新闻 -->
    <update id="softDeleteById" parameterType="java.lang.Long">
        UPDATE news SET is_deleted = 1, updated_at = NOW() WHERE id = #{id}
    </update>

    <!-- 更新新闻 -->
    <update id="updateById" parameterType="com.yxrobot.entity.News">
        UPDATE news
        <set>
            <if test="title != null and title != ''">title = #{title},</if>
            <if test="excerpt != null">excerpt = #{excerpt},</if>
            <if test="content != null and content != ''">content = #{content},</if>
            <if test="categoryId != null">category_id = #{categoryId},</if>
            <if test="author != null and author != ''">author = #{author},</if>
            <if test="status != null">status = #{status},</if>
            <if test="coverImage != null">cover_image = #{coverImage},</if>
            <if test="publishTime != null">publish_time = #{publishTime},</if>
            <if test="views != null">views = #{views},</if>
            <if test="comments != null">comments = #{comments},</if>
            <if test="likes != null">likes = #{likes},</if>
            <if test="isFeatured != null">is_featured = #{isFeatured},</if>
            <if test="sortOrder != null">sort_order = #{sortOrder},</if>
            updated_at = NOW()
        </set>
        WHERE id = #{id}
    </update>

    <!-- 根据ID查询新闻 -->
    <select id="selectById" parameterType="java.lang.Long" resultMap="NewsResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM news
        WHERE id = #{id} AND is_deleted = 0
    </select>

    <!-- 根据ID查询新闻（包含分类和标签信息） -->
    <select id="selectByIdWithDetails" parameterType="java.lang.Long" resultMap="NewsWithDetailsResultMap">
        SELECT 
            <include refid="News_With_Category_Column_List"/>,
            t.id as tag_id, t.name as tag_name, t.color as tag_color
        FROM news n
        LEFT JOIN news_categories c ON n.category_id = c.id
        LEFT JOIN news_tag_relations ntr ON n.id = ntr.news_id
        LEFT JOIN news_tags t ON ntr.tag_id = t.id
        WHERE n.id = #{id} AND n.is_deleted = 0
    </select>

    <!-- 分页查询新闻列表 -->
    <select id="selectByPage" resultMap="NewsWithCategoryResultMap">
        SELECT <include refid="News_With_Category_Column_List"/>
        FROM news n
        LEFT JOIN news_categories c ON n.category_id = c.id
        WHERE n.is_deleted = 0
        ORDER BY n.is_featured DESC, n.sort_order DESC, n.created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 条件查询新闻列表 -->
    <select id="selectByConditions" resultMap="NewsWithCategoryResultMap">
        SELECT <include refid="News_With_Category_Column_List"/>
        FROM news n
        LEFT JOIN news_categories c ON n.category_id = c.id
        <include refid="Common_Where_Clause"/>
        ORDER BY n.is_featured DESC, n.sort_order DESC, n.created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 根据状态查询新闻列表 -->
    <select id="selectByStatus" resultMap="NewsWithCategoryResultMap">
        SELECT <include refid="News_With_Category_Column_List"/>
        FROM news n
        LEFT JOIN news_categories c ON n.category_id = c.id
        WHERE n.status = #{status} AND n.is_deleted = 0
        ORDER BY n.is_featured DESC, n.sort_order DESC, n.created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 根据分类ID查询新闻列表 -->
    <select id="selectByCategoryId" resultMap="NewsWithCategoryResultMap">
        SELECT <include refid="News_With_Category_Column_List"/>
        FROM news n
        LEFT JOIN news_categories c ON n.category_id = c.id
        WHERE n.category_id = #{categoryId} AND n.is_deleted = 0
        ORDER BY n.is_featured DESC, n.sort_order DESC, n.created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 根据作者查询新闻列表 -->
    <select id="selectByAuthor" resultMap="NewsWithCategoryResultMap">
        SELECT <include refid="News_With_Category_Column_List"/>
        FROM news n
        LEFT JOIN news_categories c ON n.category_id = c.id
        WHERE n.author = #{author} AND n.is_deleted = 0
        ORDER BY n.is_featured DESC, n.sort_order DESC, n.created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 搜索新闻（标题和内容） -->
    <select id="searchByKeyword" resultMap="NewsWithCategoryResultMap">
        SELECT <include refid="News_With_Category_Column_List"/>
        FROM news n
        LEFT JOIN news_categories c ON n.category_id = c.id
        WHERE (n.title LIKE CONCAT('%', #{keyword}, '%') 
               OR n.content LIKE CONCAT('%', #{keyword}, '%'))
              AND n.is_deleted = 0
        ORDER BY n.is_featured DESC, n.sort_order DESC, n.created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 查询推荐新闻 -->
    <select id="selectFeatured" resultMap="NewsWithCategoryResultMap">
        SELECT <include refid="News_With_Category_Column_List"/>
        FROM news n
        LEFT JOIN news_categories c ON n.category_id = c.id
        WHERE n.is_featured = 1 AND n.status = 'PUBLISHED' AND n.is_deleted = 0
        ORDER BY n.sort_order DESC, n.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 查询热门新闻（按浏览量排序） -->
    <select id="selectHotNews" resultMap="NewsWithCategoryResultMap">
        SELECT <include refid="News_With_Category_Column_List"/>
        FROM news n
        LEFT JOIN news_categories c ON n.category_id = c.id
        WHERE n.status = 'PUBLISHED' AND n.is_deleted = 0
        ORDER BY n.views DESC, n.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 查询最新发布的新闻 -->
    <select id="selectLatestPublished" resultMap="NewsWithCategoryResultMap">
        SELECT <include refid="News_With_Category_Column_List"/>
        FROM news n
        LEFT JOIN news_categories c ON n.category_id = c.id
        WHERE n.status = 'PUBLISHED' AND n.is_deleted = 0
        ORDER BY n.publish_time DESC, n.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 查询相关新闻（同分类） -->
    <select id="selectRelatedNews" resultMap="NewsWithCategoryResultMap">
        SELECT <include refid="News_With_Category_Column_List"/>
        FROM news n
        LEFT JOIN news_categories c ON n.category_id = c.id
        WHERE n.category_id = #{categoryId} 
              AND n.id != #{newsId} 
              AND n.status = 'PUBLISHED' 
              AND n.is_deleted = 0
        ORDER BY n.views DESC, n.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 统计新闻总数 -->
    <select id="countAll" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM news WHERE is_deleted = 0
    </select>

    <!-- 根据条件统计新闻数量 -->
    <select id="countByConditions" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM news n
        <include refid="Common_Where_Clause"/>
    </select>

    <!-- 根据状态统计新闻数量 -->
    <select id="countByStatus" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM news 
        WHERE status = #{status} AND is_deleted = 0
    </select>

    <!-- 根据分类统计新闻数量 -->
    <select id="countByCategoryId" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM news 
        WHERE category_id = #{categoryId} AND is_deleted = 0
    </select>

    <!-- 根据作者统计新闻数量 -->
    <select id="countByAuthor" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM news 
        WHERE author = #{author} AND is_deleted = 0
    </select>

    <!-- 搜索新闻数量统计 -->
    <select id="countByKeyword" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM news 
        WHERE (title LIKE CONCAT('%', #{keyword}, '%') 
               OR content LIKE CONCAT('%', #{keyword}, '%'))
              AND is_deleted = 0
    </select>

    <!-- 更新新闻状态 -->
    <update id="updateStatus">
        UPDATE news 
        SET status = #{status}, 
            <if test="publishTime != null">
                publish_time = #{publishTime},
            </if>
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 批量更新新闻状态 -->
    <update id="batchUpdateStatus">
        UPDATE news 
        SET status = #{status}, updated_at = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <!-- 更新发布时间 -->
    <update id="updatePublishTime">
        UPDATE news 
        SET publish_time = #{publishTime}, updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 增加浏览量 -->
    <update id="incrementViews" parameterType="java.lang.Long">
        UPDATE news 
        SET views = views + 1, updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 增加评论数 -->
    <update id="incrementComments" parameterType="java.lang.Long">
        UPDATE news 
        SET comments = comments + 1, updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 增加点赞数 -->
    <update id="incrementLikes" parameterType="java.lang.Long">
        UPDATE news 
        SET likes = likes + 1, updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 减少点赞数 -->
    <update id="decrementLikes" parameterType="java.lang.Long">
        UPDATE news 
        SET likes = GREATEST(0, likes - 1), updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 更新推荐状态 -->
    <update id="updateFeaturedStatus">
        UPDATE news 
        SET is_featured = #{isFeatured}, updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 批量更新推荐状态 -->
    <update id="batchUpdateFeaturedStatus">
        UPDATE news 
        SET is_featured = #{isFeatured}, updated_at = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <!-- 获取新闻统计数据 -->
    <select id="getNewsStats" resultType="java.util.Map">
        SELECT 
            COUNT(*) as total,
            SUM(CASE WHEN status = 'PUBLISHED' THEN 1 ELSE 0 END) as published,
            SUM(CASE WHEN status = 'DRAFT' THEN 1 ELSE 0 END) as draft,
            SUM(CASE WHEN status = 'OFFLINE' THEN 1 ELSE 0 END) as offline,
            SUM(views) as totalViews,
            SUM(comments) as totalComments,
            SUM(likes) as totalLikes
        FROM news 
        WHERE is_deleted = 0
    </select>

    <!-- 获取按日期统计的新闻数据 -->
    <select id="getNewsStatsByDate" resultType="java.util.Map">
        SELECT 
            DATE(created_at) as date,
            COUNT(*) as count,
            SUM(CASE WHEN status = 'PUBLISHED' THEN 1 ELSE 0 END) as published
        FROM news 
        WHERE created_at BETWEEN #{startDate} AND #{endDate}
              AND is_deleted = 0
        GROUP BY DATE(created_at)
        ORDER BY date DESC
    </select>

    <!-- 获取按分类统计的新闻数据 -->
    <select id="getNewsStatsByCategory" resultType="java.util.Map">
        SELECT 
            c.name as categoryName,
            COUNT(n.id) as count,
            SUM(CASE WHEN n.status = 'PUBLISHED' THEN 1 ELSE 0 END) as published
        FROM news_categories c
        LEFT JOIN news n ON c.id = n.category_id AND n.is_deleted = 0
        GROUP BY c.id, c.name
        ORDER BY count DESC
    </select>

    <!-- 获取按作者统计的新闻数据 -->
    <select id="getNewsStatsByAuthor" resultType="java.util.Map">
        SELECT 
            author,
            COUNT(*) as count,
            SUM(CASE WHEN status = 'PUBLISHED' THEN 1 ELSE 0 END) as published,
            SUM(views) as totalViews
        FROM news 
        WHERE is_deleted = 0
        GROUP BY author
        ORDER BY count DESC
    </select>

</mapper>