<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yxrobot.mapper.OrderItemMapper">

    <!-- 订单商品明细结果映射 -->
    <resultMap id="OrderItemResultMap" type="com.yxrobot.entity.OrderItem">
        <id column="id" property="id"/>
        <result column="order_id" property="orderId"/>
        <result column="product_id" property="productId"/>
        <result column="product_name" property="productName"/>
        <result column="product_model" property="productModel"/>
        <result column="quantity" property="quantity"/>
        <result column="unit_price" property="unitPrice"/>
        <result column="total_price" property="totalPrice"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
    </resultMap>

    <!-- 订单商品明细结果映射（包含产品信息） -->
    <resultMap id="OrderItemWithProductResultMap" type="com.yxrobot.entity.OrderItem" extends="OrderItemResultMap">
        <association property="product" javaType="com.yxrobot.entity.Product">
            <id column="product_id" property="id"/>
            <result column="product_name" property="name"/>
            <result column="product_model" property="model"/>
            <result column="product_description" property="description"/>
            <result column="product_price" property="price"/>
        </association>
    </resultMap>

    <!-- 基础查询字段 -->
    <sql id="Base_Column_List">
        id, order_id, product_id, product_name, product_model, quantity, unit_price, total_price, created_at, updated_at
    </sql>

    <!-- 带产品信息的查询字段 -->
    <sql id="Detail_Column_List">
        oi.id, oi.order_id, oi.product_id, oi.product_name, oi.product_model, 
        oi.quantity, oi.unit_price, oi.total_price, oi.created_at, oi.updated_at,
        p.name as product_name,
        p.model as product_model,
        p.description as product_description,
        p.price as product_price
    </sql>

    <!-- 根据ID查询订单商品明细 -->
    <select id="selectById" resultMap="OrderItemResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM order_items
        WHERE id = #{id}
    </select>

    <!-- 根据ID查询订单商品明细（包含产品信息） -->
    <select id="selectByIdWithProduct" resultMap="OrderItemWithProductResultMap">
        SELECT <include refid="Detail_Column_List"/>
        FROM order_items oi
        LEFT JOIN products p ON oi.product_id = p.id
        WHERE oi.id = #{id}
    </select>

    <!-- 插入订单商品明细 -->
    <insert id="insert" parameterType="com.yxrobot.entity.OrderItem" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO order_items (
            order_id, product_id, product_name, product_model, quantity, unit_price, total_price, created_at, updated_at
        ) VALUES (
            #{orderId}, #{productId}, #{productName}, #{productModel}, #{quantity}, #{unitPrice}, #{totalPrice}, NOW(), NOW()
        )
    </insert>

    <!-- 批量插入订单商品明细 -->
    <insert id="batchInsert" parameterType="java.util.List">
        INSERT INTO order_items (
            order_id, product_id, product_name, product_model, quantity, unit_price, total_price, created_at, updated_at
        ) VALUES
        <foreach collection="orderItems" item="item" separator=",">
            (#{item.orderId}, #{item.productId}, #{item.productName}, #{item.productModel}, 
             #{item.quantity}, #{item.unitPrice}, #{item.totalPrice}, NOW(), NOW())
        </foreach>
    </insert>

    <!-- 更新订单商品明细 -->
    <update id="updateById" parameterType="com.yxrobot.entity.OrderItem">
        UPDATE order_items SET
            product_id = #{productId},
            product_name = #{productName},
            product_model = #{productModel},
            quantity = #{quantity},
            unit_price = #{unitPrice},
            total_price = #{totalPrice},
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 根据ID删除订单商品明细 -->
    <delete id="deleteById">
        DELETE FROM order_items WHERE id = #{id}
    </delete>

    <!-- 根据订单ID删除所有商品明细 -->
    <delete id="deleteByOrderId">
        DELETE FROM order_items WHERE order_id = #{orderId}
    </delete>

    <!-- 批量删除订单商品明细 -->
    <delete id="batchDelete">
        DELETE FROM order_items WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <!-- 根据订单ID查询商品明细列表 -->
    <select id="selectByOrderId" resultMap="OrderItemResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM order_items
        WHERE order_id = #{orderId}
        ORDER BY id ASC
    </select>

    <!-- 根据订单ID查询商品明细列表（包含产品信息） -->
    <select id="selectByOrderIdWithProduct" resultMap="OrderItemWithProductResultMap">
        SELECT <include refid="Detail_Column_List"/>
        FROM order_items oi
        LEFT JOIN products p ON oi.product_id = p.id
        WHERE oi.order_id = #{orderId}
        ORDER BY oi.id ASC
    </select>

    <!-- 根据产品ID查询相关订单商品明细 -->
    <select id="selectByProductId" resultMap="OrderItemResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM order_items
        WHERE product_id = #{productId}
        ORDER BY created_at DESC
    </select>

    <!-- 根据订单ID列表查询商品明细 -->
    <select id="selectByOrderIds" resultMap="OrderItemResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM order_items
        WHERE order_id IN
        <foreach collection="orderIds" item="orderId" open="(" separator="," close=")">
            #{orderId}
        </foreach>
        ORDER BY order_id, id ASC
    </select>

    <!-- 根据产品ID列表查询商品明细 -->
    <select id="selectByProductIds" resultMap="OrderItemResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM order_items
        WHERE product_id IN
        <foreach collection="productIds" item="productId" open="(" separator="," close=")">
            #{productId}
        </foreach>
        ORDER BY created_at DESC
    </select>

    <!-- 查询订单的商品总数量 -->
    <select id="selectTotalQuantityByOrderId" resultType="java.lang.Integer">
        SELECT COALESCE(SUM(quantity), 0)
        FROM order_items
        WHERE order_id = #{orderId}
    </select>

    <!-- 查询订单的商品总金额 -->
    <select id="selectTotalAmountByOrderId" resultType="java.math.BigDecimal">
        SELECT COALESCE(SUM(total_price), 0)
        FROM order_items
        WHERE order_id = #{orderId}
    </select>

    <!-- 查询产品的销售统计 -->
    <select id="selectProductSalesStats" resultType="java.util.Map">
        SELECT 
            product_id,
            product_name,
            COUNT(*) as order_count,
            SUM(quantity) as total_quantity,
            SUM(total_price) as total_amount,
            AVG(unit_price) as avg_unit_price,
            MAX(unit_price) as max_unit_price,
            MIN(unit_price) as min_unit_price
        FROM order_items
        WHERE product_id = #{productId}
        GROUP BY product_id, product_name
    </select>

    <!-- 查询产品销售排行 -->
    <select id="selectProductSalesRanking" resultType="java.util.Map">
        SELECT 
            product_id,
            product_name,
            COUNT(*) as order_count,
            SUM(quantity) as total_quantity,
            SUM(total_price) as total_amount
        FROM order_items
        GROUP BY product_id, product_name
        ORDER BY total_amount DESC
        <if test="limit != null">
            LIMIT #{limit}
        </if>
    </select>

    <!-- 查询产品销售趋势 -->
    <select id="selectProductSalesTrend" resultType="java.util.Map">
        SELECT 
            DATE_FORMAT(oi.created_at, '%Y-%m') as month,
            COUNT(*) as order_count,
            SUM(oi.quantity) as total_quantity,
            SUM(oi.total_price) as total_amount
        FROM order_items oi
        WHERE oi.product_id = #{productId}
        <if test="months != null">
            AND oi.created_at >= DATE_SUB(NOW(), INTERVAL #{months} MONTH)
        </if>
        GROUP BY DATE_FORMAT(oi.created_at, '%Y-%m')
        ORDER BY month DESC
    </select>

    <!-- 查询热销产品 -->
    <select id="selectHotProducts" resultType="java.util.Map">
        SELECT 
            product_id,
            product_name,
            COUNT(*) as order_count,
            SUM(quantity) as total_quantity,
            SUM(total_price) as total_amount
        FROM order_items
        WHERE created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
        GROUP BY product_id, product_name
        ORDER BY total_quantity DESC
        <if test="limit != null">
            LIMIT #{limit}
        </if>
    </select>

    <!-- 查询滞销产品 -->
    <select id="selectSlowMovingProducts" resultType="java.util.Map">
        SELECT 
            p.id as product_id,
            p.name as product_name,
            COALESCE(SUM(oi.quantity), 0) as total_quantity,
            COALESCE(COUNT(oi.id), 0) as order_count
        FROM products p
        LEFT JOIN order_items oi ON p.id = oi.product_id 
            AND oi.created_at >= DATE_SUB(NOW(), INTERVAL #{days} DAY)
        GROUP BY p.id, p.name
        HAVING total_quantity = 0 OR order_count <= 1
        ORDER BY total_quantity ASC
        <if test="limit != null">
            LIMIT #{limit}
        </if>
    </select>

    <!-- 检查订单是否包含指定产品 -->
    <select id="existsByOrderIdAndProductId" resultType="boolean">
        SELECT COUNT(*) > 0 FROM order_items 
        WHERE order_id = #{orderId} AND product_id = #{productId}
    </select>

    <!-- 查询订单的商品种类数量 -->
    <select id="countProductTypesByOrderId" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT product_id)
        FROM order_items
        WHERE order_id = #{orderId}
    </select>

    <!-- 查询产品的订单数量 -->
    <select id="countOrdersByProductId" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT order_id)
        FROM order_items
        WHERE product_id = #{productId}
    </select>

    <!-- 查询订单商品明细总数 -->
    <select id="countByOrderId" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM order_items
        WHERE order_id = #{orderId}
    </select>

    <!-- 查询客户购买的产品列表 -->
    <select id="selectProductsByCustomerId" resultMap="OrderItemResultMap">
        SELECT DISTINCT <include refid="Base_Column_List"/>
        FROM order_items oi
        JOIN orders o ON oi.order_id = o.id
        WHERE o.customer_id = #{customerId} AND o.is_deleted = 0
        ORDER BY oi.created_at DESC
    </select>

    <!-- 查询客户重复购买的产品 -->
    <select id="selectRepeatPurchasesByCustomer" resultType="java.util.Map">
        SELECT 
            oi.product_id,
            oi.product_name,
            COUNT(*) as purchase_count,
            SUM(oi.quantity) as total_quantity,
            SUM(oi.total_price) as total_amount,
            MAX(oi.created_at) as last_purchase_date
        FROM order_items oi
        JOIN orders o ON oi.order_id = o.id
        WHERE o.customer_id = #{customerId} AND o.is_deleted = 0
        GROUP BY oi.product_id, oi.product_name
        HAVING purchase_count > 1
        ORDER BY purchase_count DESC, total_amount DESC
    </select>

    <!-- 查询产品的平均销售价格 -->
    <select id="selectAverageSellingPrice" resultType="java.math.BigDecimal">
        SELECT COALESCE(AVG(unit_price), 0)
        FROM order_items
        WHERE product_id = #{productId}
    </select>

    <!-- 搜索订单商品明细 -->
    <select id="searchOrderItems" resultMap="OrderItemResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM order_items
        WHERE 1=1
        <if test="orderId != null">
            AND order_id = #{orderId}
        </if>
        <if test="keyword != null and keyword != ''">
            AND (product_name LIKE CONCAT('%', #{keyword}, '%') 
                 OR product_model LIKE CONCAT('%', #{keyword}, '%'))
        </if>
        ORDER BY created_at DESC
    </select>

    <!-- 查询大额商品明细 -->
    <select id="selectHighValueItems" resultMap="OrderItemResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM order_items
        WHERE total_price >= #{minAmount}
        ORDER BY total_price DESC
    </select>

    <!-- 查询批量购买的商品明细 -->
    <select id="selectBulkPurchaseItems" resultMap="OrderItemResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM order_items
        WHERE quantity >= #{minQuantity}
        ORDER BY quantity DESC
    </select>

    <!-- 查询商品明细汇总信息 -->
    <select id="selectOrderItemsSummary" resultType="java.util.Map">
        SELECT 
            COUNT(*) as item_count,
            COUNT(DISTINCT product_id) as product_types,
            SUM(quantity) as total_quantity,
            SUM(total_price) as total_amount,
            AVG(unit_price) as avg_unit_price,
            MAX(unit_price) as max_unit_price,
            MIN(unit_price) as min_unit_price
        FROM order_items
        WHERE order_id = #{orderId}
    </select>

</mapper>