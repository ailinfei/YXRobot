package com.yxrobot.integration;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.yxrobot.dto.*;
import com.yxrobot.entity.*;
import com.yxrobot.mapper.*;
import com.yxrobot.service.*;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureTestMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * 公益项目管理系统集成测试
 * 
 * 测试完整的端到端流程，包括：
 * 1. 统计数据更新的完整流程
 * 2. 机构和活动管理的CRUD操作
 * 3. 图表数据生成的正确性
 * 4. 缓存机制的有效性
 * 5. 与前端页面的接口兼容性
 * 
 * @author YXRobot Development Team
 * @since 1.0.0
 */
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@AutoConfigureTestMvc
@ActiveProfiles("test")
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class CharityIntegrationTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private CharityService charityService;

    @Autowired
    private CharityInstitutionService institutionService;

    @Autowired
    private CharityActivityService activityService;

    @Autowired
    private CharityChartService chartService;

    @Autowired
    private CharityStatsLogService statsLogService;

    @Autowired
    private CacheService cacheService;

    @Autowired
    private CharityStatsMapper statsMapper;

    @Autowired
    private CharityInstitutionMapper institutionMapper;

    @Autowired
    private CharityActivityMapper activityMapper;

    @Autowired
    private RedisTemplate<String, Object> redisTemplate;

    private static final String API_BASE_PATH = "/api/admin/charity";
    private static final String AUTH_HEADER = "Authorization";
    private static final String TEST_TOKEN = "Bearer test-token";

    private Long testInstitutionId;
    private Long testActivityId;
    private CharityStatsDTO originalStats;

    /**
     * 测试前准备工作
     * 清理缓存，准备测试数据
     */
    @BeforeEach
    void setUp() {
        // 清理Redis缓存
        redisTemplate.getConnectionFactory().getConnection().flushAll();
        
        // 保存原始统计数据用于恢复
        originalStats = charityService.getCharityStats();
    }

    /**
     * 测试后清理工作
     * 恢复原始数据状态
     */
    @AfterEach
    void tearDown() {
        // 清理测试数据
        if (testActivityId != null) {
            try {
                activityService.deleteCharityActivity(testActivityId);
            } catch (Exception e) {
                // 忽略删除异常
            }
        }
        
        if (testInstitutionId != null) {
            try {
                institutionService.deleteCharityInstitution(testInstitutionId);
            } catch (Exception e) {
                // 忽略删除异常
            }
        }
        
        // 恢复原始统计数据
        if (originalStats != null) {
            try {
                charityService.updateCharityStats(originalStats);
            } catch (Exception e) {
                // 忽略恢复异常
            }
        }
    }

    /**
     * 测试1: 统计数据更新的端到端流程
     * 验证统计数据的完整更新流程，包括数据验证、缓存更新、日志记录
     */
    @Test
    @Order(1)
    @DisplayName("测试统计数据更新的端到端流程")
    void testStatsUpdateEndToEndFlow() throws Exception {
        // 1. 获取当前统计数据
        String getStatsResponse = mockMvc.perform(get(API_BASE_PATH + "/stats")
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.data").exists())
                .andReturn().getResponse().getContentAsString();

        // 验证返回数据结构
        Map<String, Object> statsResponse = objectMapper.readValue(getStatsResponse, Map.class);
        Map<String, Object> statsData = (Map<String, Object>) statsResponse.get("data");
        
        assertNotNull(statsData.get("totalBeneficiaries"));
        assertNotNull(statsData.get("totalInstitutions"));
        assertNotNull(statsData.get("totalVolunteers"));

        // 2. 准备更新数据
        CharityStatsDTO updateStats = new CharityStatsDTO();
        updateStats.setTotalBeneficiaries(30000L);
        updateStats.setTotalInstitutions(350L);
        updateStats.setCooperatingInstitutions(200L);
        updateStats.setTotalVolunteers(300L);
        updateStats.setTotalRaised(new BigDecimal("20000000"));
        updateStats.setTotalDonated(new BigDecimal("16000000"));
        updateStats.setTotalProjects(160L);
        updateStats.setActiveProjects(45L);
        updateStats.setCompletedProjects(95L);
        updateStats.setTotalActivities(480L);
        updateStats.setThisMonthActivities(30L);
        updateStats.setUpdateReason("集成测试数据更新");

        // 3. 执行统计数据更新
        mockMvc.perform(put(API_BASE_PATH + "/stats")
                .header(AUTH_HEADER, TEST_TOKEN)
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(updateStats)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.message").value("统计数据更新成功"));

        // 4. 验证数据已更新
        CharityStatsDTO updatedStats = charityService.getCharityStats();
        assertEquals(30000L, updatedStats.getTotalBeneficiaries());
        assertEquals(350L, updatedStats.getTotalInstitutions());
        assertEquals(200L, updatedStats.getCooperatingInstitutions());

        // 5. 验证缓存已更新
        CharityStatsDTO cachedStats = (CharityStatsDTO) cacheService.get("charity:stats");
        assertNotNull(cachedStats);
        assertEquals(30000L, cachedStats.getTotalBeneficiaries());

        // 6. 验证更新日志已记录
        List<CharityStatsLog> logs = statsLogService.getStatsUpdateHistory(1, 10);
        assertFalse(logs.isEmpty());
        assertEquals("集成测试数据更新", logs.get(0).getUpdateReason());

        // 7. 测试增强统计数据接口
        mockMvc.perform(get(API_BASE_PATH + "/enhanced-stats")
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.data.basicStats").exists())
                .andExpect(jsonPath("$.data.trends").exists());
    }

    /**
     * 测试2: 合作机构管理的完整CRUD操作
     * 验证机构的创建、查询、更新、删除操作的完整流程
     */
    @Test
    @Order(2)
    @DisplayName("测试合作机构管理的完整CRUD操作")
    void testInstitutionCrudOperations() throws Exception {
        // 1. 创建测试机构
        CharityInstitutionDTO createDto = new CharityInstitutionDTO();
        createDto.setName("集成测试学校");
        createDto.setType("school");
        createDto.setLocation("北京市");
        createDto.setAddress("北京市海淀区测试路123号");
        createDto.setContactPerson("张测试");
        createDto.setContactPhone("13800138000");
        createDto.setEmail("test@integration.com");
        createDto.setStudentCount(500L);
        createDto.setCooperationDate(LocalDate.now());
        createDto.setStatus("active");
        createDto.setDeviceCount(8L);
        createDto.setNotes("集成测试机构");

        String createResponse = mockMvc.perform(post(API_BASE_PATH + "/institutions")
                .header(AUTH_HEADER, TEST_TOKEN)
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(createDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.message").value("合作机构创建成功"))
                .andReturn().getResponse().getContentAsString();

        // 获取创建的机构ID
        Map<String, Object> createResult = objectMapper.readValue(createResponse, Map.class);
        testInstitutionId = Long.valueOf(createResult.get("data").toString());

        // 2. 查询机构详情
        mockMvc.perform(get(API_BASE_PATH + "/institutions/" + testInstitutionId)
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.data.name").value("集成测试学校"))
                .andExpect(jsonPath("$.data.type").value("school"))
                .andExpect(jsonPath("$.data.contactPerson").value("张测试"));

        // 3. 查询机构列表（包含新创建的机构）
        mockMvc.perform(get(API_BASE_PATH + "/institutions")
                .header(AUTH_HEADER, TEST_TOKEN)
                .param("page", "1")
                .param("pageSize", "10")
                .param("keyword", "集成测试"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.data.records").isArray())
                .andExpect(jsonPath("$.data.total").exists());

        // 4. 更新机构信息
        CharityInstitutionDTO updateDto = new CharityInstitutionDTO();
        updateDto.setId(testInstitutionId);
        updateDto.setName("集成测试学校（已更新）");
        updateDto.setType("school");
        updateDto.setLocation("北京市");
        updateDto.setAddress("北京市海淀区测试路456号");
        updateDto.setContactPerson("李测试");
        updateDto.setContactPhone("13900139000");
        updateDto.setEmail("updated@integration.com");
        updateDto.setStudentCount(600L);
        updateDto.setCooperationDate(LocalDate.now());
        updateDto.setStatus("active");
        updateDto.setDeviceCount(10L);
        updateDto.setNotes("集成测试机构（已更新）");

        mockMvc.perform(put(API_BASE_PATH + "/institutions/" + testInstitutionId)
                .header(AUTH_HEADER, TEST_TOKEN)
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(updateDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.message").value("合作机构更新成功"));

        // 5. 验证更新结果
        mockMvc.perform(get(API_BASE_PATH + "/institutions/" + testInstitutionId)
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.name").value("集成测试学校（已更新）"))
                .andExpect(jsonPath("$.data.contactPerson").value("李测试"))
                .andExpect(jsonPath("$.data.studentCount").value(600));

        // 6. 测试条件查询
        mockMvc.perform(get(API_BASE_PATH + "/institutions")
                .header(AUTH_HEADER, TEST_TOKEN)
                .param("type", "school")
                .param("status", "active"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true));

        // 7. 删除机构（软删除）
        mockMvc.perform(delete(API_BASE_PATH + "/institutions/" + testInstitutionId)
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.message").value("合作机构删除成功"));

        // 8. 验证删除结果（应该查询不到）
        mockMvc.perform(get(API_BASE_PATH + "/institutions/" + testInstitutionId)
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isNotFound());
    }

    /**
     * 测试3: 公益活动管理的完整CRUD操作
     * 验证活动的创建、查询、更新、删除操作的完整流程
     */
    @Test
    @Order(3)
    @DisplayName("测试公益活动管理的完整CRUD操作")
    void testActivityCrudOperations() throws Exception {
        // 1. 创建测试活动
        CharityActivityDTO createDto = new CharityActivityDTO();
        createDto.setTitle("集成测试公益活动");
        createDto.setDescription("这是一个集成测试活动");
        createDto.setType("donation");
        createDto.setDate(LocalDate.now().plusDays(7));
        createDto.setLocation("北京市朝阳区");
        createDto.setParticipants(150L);
        createDto.setOrganizer("YXRobot基金会");
        createDto.setStatus("planned");
        createDto.setBudget(new BigDecimal("25000"));
        createDto.setActualCost(new BigDecimal("0"));

        String createResponse = mockMvc.perform(post(API_BASE_PATH + "/activities")
                .header(AUTH_HEADER, TEST_TOKEN)
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(createDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.message").value("公益活动创建成功"))
                .andReturn().getResponse().getContentAsString();

        // 获取创建的活动ID
        Map<String, Object> createResult = objectMapper.readValue(createResponse, Map.class);
        testActivityId = Long.valueOf(createResult.get("data").toString());

        // 2. 查询活动详情
        mockMvc.perform(get(API_BASE_PATH + "/activities/" + testActivityId)
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.data.title").value("集成测试公益活动"))
                .andExpect(jsonPath("$.data.type").value("donation"))
                .andExpect(jsonPath("$.data.organizer").value("YXRobot基金会"));

        // 3. 查询活动列表
        mockMvc.perform(get(API_BASE_PATH + "/activities")
                .header(AUTH_HEADER, TEST_TOKEN)
                .param("page", "1")
                .param("pageSize", "10")
                .param("keyword", "集成测试"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.data.records").isArray());

        // 4. 更新活动信息
        CharityActivityDTO updateDto = new CharityActivityDTO();
        updateDto.setId(testActivityId);
        updateDto.setTitle("集成测试公益活动（已更新）");
        updateDto.setDescription("这是一个更新后的集成测试活动");
        updateDto.setType("volunteer");
        updateDto.setDate(LocalDate.now().plusDays(10));
        updateDto.setLocation("北京市海淀区");
        updateDto.setParticipants(200L);
        updateDto.setOrganizer("YXRobot基金会");
        updateDto.setStatus("ongoing");
        updateDto.setBudget(new BigDecimal("30000"));
        updateDto.setActualCost(new BigDecimal("15000"));

        mockMvc.perform(put(API_BASE_PATH + "/activities/" + testActivityId)
                .header(AUTH_HEADER, TEST_TOKEN)
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(updateDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.message").value("公益活动更新成功"));

        // 5. 验证更新结果
        mockMvc.perform(get(API_BASE_PATH + "/activities/" + testActivityId)
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.title").value("集成测试公益活动（已更新）"))
                .andExpect(jsonPath("$.data.type").value("volunteer"))
                .andExpect(jsonPath("$.data.participants").value(200));

        // 6. 测试条件查询
        mockMvc.perform(get(API_BASE_PATH + "/activities")
                .header(AUTH_HEADER, TEST_TOKEN)
                .param("type", "volunteer")
                .param("status", "ongoing"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true));

        // 7. 删除活动
        mockMvc.perform(delete(API_BASE_PATH + "/activities/" + testActivityId)
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.message").value("公益活动删除成功"));

        // 8. 验证删除结果
        mockMvc.perform(get(API_BASE_PATH + "/activities/" + testActivityId)
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isNotFound());
    }
    /**

     * 测试4: 图表数据生成的正确性
     * 验证各种图表数据的生成和格式正确性
     */
    @Test
    @Order(4)
    @DisplayName("测试图表数据生成的正确性")
    void testChartDataGeneration() throws Exception {
        // 1. 测试获取图表数据接口
        String chartResponse = mockMvc.perform(get(API_BASE_PATH + "/chart-data")
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.data").exists())
                .andReturn().getResponse().getContentAsString();

        // 验证图表数据结构
        Map<String, Object> chartResult = objectMapper.readValue(chartResponse, Map.class);
        Map<String, Object> chartData = (Map<String, Object>) chartResult.get("data");
        
        assertNotNull(chartData.get("projectStatusData"));
        assertNotNull(chartData.get("fundingTrendData"));
        assertNotNull(chartData.get("regionDistributionData"));
        assertNotNull(chartData.get("volunteerActivityData"));

        // 2. 测试项目状态分布数据
        CharityChartDataDTO projectStatusData = chartService.getProjectStatusData();
        assertNotNull(projectStatusData);
        assertNotNull(projectStatusData.getLabels());
        assertNotNull(projectStatusData.getValues());
        assertTrue(projectStatusData.getLabels().size() > 0);
        assertEquals(projectStatusData.getLabels().size(), projectStatusData.getValues().size());

        // 验证数据格式符合ECharts要求
        List<String> labels = projectStatusData.getLabels();
        List<Object> values = projectStatusData.getValues();
        
        for (int i = 0; i < labels.size(); i++) {
            assertNotNull(labels.get(i));
            assertNotNull(values.get(i));
            assertTrue(values.get(i) instanceof Number);
        }

        // 3. 测试资金筹集趋势数据
        CharityChartDataDTO fundingTrendData = chartService.getFundingTrendData();
        assertNotNull(fundingTrendData);
        assertNotNull(fundingTrendData.getLabels());
        assertNotNull(fundingTrendData.getValues());
        
        // 验证趋势数据包含时间序列
        assertTrue(fundingTrendData.getLabels().size() >= 6); // 至少6个月数据

        // 4. 测试地区分布数据
        CharityChartDataDTO regionData = chartService.getRegionDistributionData();
        assertNotNull(regionData);
        assertNotNull(regionData.getLabels());
        assertNotNull(regionData.getValues());

        // 5. 测试志愿者活动统计数据
        CharityChartDataDTO volunteerData = chartService.getVolunteerActivityData();
        assertNotNull(volunteerData);
        assertNotNull(volunteerData.getLabels());
        assertNotNull(volunteerData.getValues());

        // 6. 验证图表数据的数值逻辑正确性
        // 项目状态数据的总和应该等于项目总数
        CharityStatsDTO stats = charityService.getCharityStats();
        long totalFromChart = projectStatusData.getValues().stream()
                .mapToLong(v -> ((Number) v).longValue())
                .sum();
        
        // 允许一定的误差范围（考虑到测试数据可能的变化）
        assertTrue(Math.abs(totalFromChart - stats.getTotalProjects()) <= 10);

        // 7. 测试图表数据缓存
        String cacheKey = "charity:chart:project_status";
        CharityChartDataDTO cachedData = (CharityChartDataDTO) cacheService.get(cacheKey);
        if (cachedData != null) {
            assertEquals(projectStatusData.getLabels().size(), cachedData.getLabels().size());
        }
    }

    /**
     * 测试5: 缓存机制的有效性
     * 验证Redis缓存的读写、失效、更新机制
     */
    @Test
    @Order(5)
    @DisplayName("测试缓存机制的有效性")
    void testCacheEffectiveness() throws Exception {
        String statsKey = "charity:stats";
        String chartKey = "charity:chart:project_status";

        // 1. 清空缓存，确保测试环境干净
        cacheService.delete(statsKey);
        cacheService.delete(chartKey);
        
        assertNull(cacheService.get(statsKey));
        assertNull(cacheService.get(chartKey));

        // 2. 第一次请求统计数据（应该从数据库加载并缓存）
        long startTime = System.currentTimeMillis();
        
        mockMvc.perform(get(API_BASE_PATH + "/stats")
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true));
        
        long firstRequestTime = System.currentTimeMillis() - startTime;

        // 验证数据已缓存
        CharityStatsDTO cachedStats = (CharityStatsDTO) cacheService.get(statsKey);
        assertNotNull(cachedStats);

        // 3. 第二次请求相同数据（应该从缓存加载，速度更快）
        startTime = System.currentTimeMillis();
        
        mockMvc.perform(get(API_BASE_PATH + "/stats")
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true));
        
        long secondRequestTime = System.currentTimeMillis() - startTime;

        // 缓存请求应该明显更快（允许一定误差）
        assertTrue(secondRequestTime <= firstRequestTime + 50);

        // 4. 测试缓存更新机制
        CharityStatsDTO updateStats = new CharityStatsDTO();
        updateStats.setTotalBeneficiaries(35000L);
        updateStats.setTotalInstitutions(360L);
        updateStats.setCooperatingInstitutions(210L);
        updateStats.setTotalVolunteers(320L);
        updateStats.setTotalRaised(new BigDecimal("22000000"));
        updateStats.setTotalDonated(new BigDecimal("18000000"));
        updateStats.setTotalProjects(170L);
        updateStats.setActiveProjects(50L);
        updateStats.setCompletedProjects(100L);
        updateStats.setTotalActivities(500L);
        updateStats.setThisMonthActivities(35L);
        updateStats.setUpdateReason("缓存测试更新");

        // 更新统计数据
        mockMvc.perform(put(API_BASE_PATH + "/stats")
                .header(AUTH_HEADER, TEST_TOKEN)
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(updateStats)))
                .andExpect(status().isOk());

        // 5. 验证缓存已更新
        CharityStatsDTO updatedCachedStats = (CharityStatsDTO) cacheService.get(statsKey);
        assertNotNull(updatedCachedStats);
        assertEquals(35000L, updatedCachedStats.getTotalBeneficiaries());
        assertEquals(360L, updatedCachedStats.getTotalInstitutions());

        // 6. 测试图表数据缓存
        mockMvc.perform(get(API_BASE_PATH + "/chart-data")
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isOk());

        // 验证图表数据已缓存
        CharityChartDataDTO cachedChartData = (CharityChartDataDTO) cacheService.get(chartKey);
        // 注意：图表数据可能有多个缓存键，这里只测试一个示例

        // 7. 测试缓存失效机制
        cacheService.delete(statsKey);
        assertNull(cacheService.get(statsKey));

        // 再次请求应该重新从数据库加载
        mockMvc.perform(get(API_BASE_PATH + "/stats")
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isOk());

        // 验证缓存已重新建立
        CharityStatsDTO reloadedStats = (CharityStatsDTO) cacheService.get(statsKey);
        assertNotNull(reloadedStats);

        // 8. 测试缓存过期时间
        // 设置一个短期缓存进行测试
        String testKey = "test:cache:expiry";
        cacheService.set(testKey, "test-value", 1); // 1秒过期
        
        assertEquals("test-value", cacheService.get(testKey));
        
        // 等待过期
        Thread.sleep(1100);
        assertNull(cacheService.get(testKey));
    }

    /**
     * 测试6: 与前端页面的接口兼容性
     * 验证API响应格式与前端期望的数据结构完全匹配
     */
    @Test
    @Order(6)
    @DisplayName("测试与前端页面的接口兼容性")
    void testFrontendCompatibility() throws Exception {
        // 1. 测试统计数据接口的响应格式
        String statsResponse = mockMvc.perform(get(API_BASE_PATH + "/stats")
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.data").exists())
                .andExpect(jsonPath("$.message").exists())
                .andReturn().getResponse().getContentAsString();

        // 验证统计数据的具体字段
        Map<String, Object> statsResult = objectMapper.readValue(statsResponse, Map.class);
        Map<String, Object> statsData = (Map<String, Object>) statsResult.get("data");

        // 验证前端需要的所有统计字段
        String[] requiredStatsFields = {
            "totalBeneficiaries", "totalInstitutions", "cooperatingInstitutions",
            "totalVolunteers", "totalRaised", "totalDonated", "totalProjects",
            "activeProjects", "completedProjects", "totalActivities", "thisMonthActivities"
        };

        for (String field : requiredStatsFields) {
            assertTrue(statsData.containsKey(field), "缺少必需字段: " + field);
            assertNotNull(statsData.get(field), "字段值不能为空: " + field);
        }

        // 2. 测试机构列表接口的分页响应格式
        String institutionsResponse = mockMvc.perform(get(API_BASE_PATH + "/institutions")
                .header(AUTH_HEADER, TEST_TOKEN)
                .param("page", "1")
                .param("pageSize", "10"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.data.records").isArray())
                .andExpect(jsonPath("$.data.total").exists())
                .andExpect(jsonPath("$.data.current").exists())
                .andExpect(jsonPath("$.data.size").exists())
                .andReturn().getResponse().getContentAsString();

        // 验证分页数据结构
        Map<String, Object> institutionsResult = objectMapper.readValue(institutionsResponse, Map.class);
        Map<String, Object> pageData = (Map<String, Object>) institutionsResult.get("data");
        
        assertTrue(pageData.containsKey("records"));
        assertTrue(pageData.containsKey("total"));
        assertTrue(pageData.containsKey("current"));
        assertTrue(pageData.containsKey("size"));

        // 3. 测试活动列表接口的响应格式
        mockMvc.perform(get(API_BASE_PATH + "/activities")
                .header(AUTH_HEADER, TEST_TOKEN)
                .param("page", "1")
                .param("pageSize", "10"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.data.records").isArray())
                .andExpect(jsonPath("$.data.total").exists());

        // 4. 测试图表数据接口的响应格式
        String chartResponse = mockMvc.perform(get(API_BASE_PATH + "/chart-data")
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.data").exists())
                .andReturn().getResponse().getContentAsString();

        // 验证图表数据结构符合ECharts要求
        Map<String, Object> chartResult = objectMapper.readValue(chartResponse, Map.class);
        Map<String, Object> chartData = (Map<String, Object>) chartResult.get("data");

        // 验证各个图表数据的存在性
        String[] requiredChartFields = {
            "projectStatusData", "fundingTrendData", 
            "regionDistributionData", "volunteerActivityData"
        };

        for (String field : requiredChartFields) {
            assertTrue(chartData.containsKey(field), "缺少图表数据字段: " + field);
        }

        // 5. 测试错误响应格式
        mockMvc.perform(get(API_BASE_PATH + "/institutions/99999")
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$.success").value(false))
                .andExpect(jsonPath("$.message").exists())
                .andExpect(jsonPath("$.code").exists());

        // 6. 测试参数验证错误响应
        CharityInstitutionDTO invalidDto = new CharityInstitutionDTO();
        // 不设置必需字段，触发验证错误

        mockMvc.perform(post(API_BASE_PATH + "/institutions")
                .header(AUTH_HEADER, TEST_TOKEN)
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(invalidDto)))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.success").value(false))
                .andExpect(jsonPath("$.message").exists());

        // 7. 测试增强统计数据的响应格式
        mockMvc.perform(get(API_BASE_PATH + "/enhanced-stats")
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.data.basicStats").exists())
                .andExpect(jsonPath("$.data.trends").exists())
                .andExpect(jsonPath("$.data.comparisons").exists());

        // 8. 测试HTTP方法支持
        // 验证不支持的方法返回正确的错误
        mockMvc.perform(patch(API_BASE_PATH + "/stats")
                .header(AUTH_HEADER, TEST_TOKEN))
                .andExpect(status().isMethodNotAllowed());
    }

    /**
     * 测试7: 数据一致性和事务完整性
     * 验证复杂操作的数据一致性和事务回滚机制
     */
    @Test
    @Order(7)
    @DisplayName("测试数据一致性和事务完整性")
    @Transactional
    void testDataConsistencyAndTransactions() throws Exception {
        // 1. 获取初始统计数据
        CharityStatsDTO initialStats = charityService.getCharityStats();
        
        // 2. 创建测试机构
        CharityInstitutionDTO institutionDto = new CharityInstitutionDTO();
        institutionDto.setName("事务测试机构");
        institutionDto.setType("school");
        institutionDto.setLocation("测试市");
        institutionDto.setAddress("测试地址");
        institutionDto.setContactPerson("测试联系人");
        institutionDto.setContactPhone("13800000000");
        institutionDto.setEmail("transaction@test.com");
        institutionDto.setStudentCount(100L);
        institutionDto.setCooperationDate(LocalDate.now());
        institutionDto.setStatus("active");
        institutionDto.setDeviceCount(2L);

        Long institutionId = institutionService.createCharityInstitution(institutionDto);
        assertNotNull(institutionId);

        // 3. 创建关联的测试活动
        CharityActivityDTO activityDto = new CharityActivityDTO();
        activityDto.setTitle("事务测试活动");
        activityDto.setDescription("测试事务一致性");
        activityDto.setType("education");
        activityDto.setDate(LocalDate.now().plusDays(5));
        activityDto.setLocation("测试地点");
        activityDto.setParticipants(50L);
        activityDto.setOrganizer("测试组织");
        activityDto.setStatus("planned");
        activityDto.setBudget(new BigDecimal("10000"));
        activityDto.setActualCost(new BigDecimal("0"));

        Long activityId = activityService.createCharityActivity(activityDto);
        assertNotNull(activityId);

        // 4. 验证数据已正确创建
        CharityInstitutionDTO createdInstitution = institutionService.getCharityInstitutionById(institutionId);
        assertNotNull(createdInstitution);
        assertEquals("事务测试机构", createdInstitution.getName());

        CharityActivityDTO createdActivity = activityService.getCharityActivityById(activityId);
        assertNotNull(createdActivity);
        assertEquals("事务测试活动", createdActivity.getTitle());

        // 5. 测试统计数据的逻辑一致性
        CharityStatsDTO currentStats = charityService.getCharityStats();
        
        // 验证基本的数据逻辑关系
        assertTrue(currentStats.getCooperatingInstitutions() <= currentStats.getTotalInstitutions());
        assertTrue(currentStats.getActiveProjects() + currentStats.getCompletedProjects() <= currentStats.getTotalProjects());
        assertTrue(currentStats.getTotalDonated().compareTo(currentStats.getTotalRaised()) <= 0);

        // 6. 测试缓存与数据库的一致性
        // 清除缓存
        cacheService.delete("charity:stats");
        
        // 从数据库重新加载
        CharityStatsDTO dbStats = charityService.getCharityStats();
        
        // 从缓存加载
        CharityStatsDTO cachedStats = charityService.getCharityStats();
        
        // 验证数据一致性
        assertEquals(dbStats.getTotalBeneficiaries(), cachedStats.getTotalBeneficiaries());
        assertEquals(dbStats.getTotalInstitutions(), cachedStats.getTotalInstitutions());
        assertEquals(dbStats.getTotalProjects(), cachedStats.getTotalProjects());

        // 7. 清理测试数据
        activityService.deleteCharityActivity(activityId);
        institutionService.deleteCharityInstitution(institutionId);
        
        // 验证删除成功
        assertThrows(Exception.class, () -> {
            institutionService.getCharityInstitutionById(institutionId);
        });
        
        assertThrows(Exception.class, () -> {
            activityService.getCharityActivityById(activityId);
        });
    }

    /**
     * 测试8: 性能和并发处理
     * 验证系统在并发访问下的性能和稳定性
     */
    @Test
    @Order(8)
    @DisplayName("测试性能和并发处理")
    void testPerformanceAndConcurrency() throws Exception {
        int concurrentRequests = 10;
        int requestsPerThread = 5;
        
        // 1. 并发测试统计数据查询
        Thread[] threads = new Thread[concurrentRequests];
        boolean[] results = new boolean[concurrentRequests];
        
        for (int i = 0; i < concurrentRequests; i++) {
            final int threadIndex = i;
            threads[i] = new Thread(() -> {
                try {
                    for (int j = 0; j < requestsPerThread; j++) {
                        mockMvc.perform(get(API_BASE_PATH + "/stats")
                                .header(AUTH_HEADER, TEST_TOKEN))
                                .andExpect(status().isOk())
                                .andExpect(jsonPath("$.success").value(true));
                    }
                    results[threadIndex] = true;
                } catch (Exception e) {
                    results[threadIndex] = false;
                    e.printStackTrace();
                }
            });
        }

        // 启动所有线程
        long startTime = System.currentTimeMillis();
        for (Thread thread : threads) {
            thread.start();
        }

        // 等待所有线程完成
        for (Thread thread : threads) {
            thread.join(5000); // 最多等待5秒
        }
        long endTime = System.currentTimeMillis();

        // 验证所有请求都成功
        for (boolean result : results) {
            assertTrue(result, "并发请求失败");
        }

        // 验证性能（总时间不应该超过合理范围）
        long totalTime = endTime - startTime;
        assertTrue(totalTime < 10000, "并发请求耗时过长: " + totalTime + "ms");

        // 2. 测试缓存在并发环境下的表现
        String testKey = "concurrent:test";
        cacheService.delete(testKey);

        Thread[] cacheThreads = new Thread[5];
        for (int i = 0; i < 5; i++) {
            final int threadIndex = i;
            cacheThreads[i] = new Thread(() -> {
                try {
                    // 模拟缓存读写操作
                    cacheService.set(testKey + ":" + threadIndex, "value" + threadIndex, 60);
                    String value = (String) cacheService.get(testKey + ":" + threadIndex);
                    assertEquals("value" + threadIndex, value);
                } catch (Exception e) {
                    fail("缓存并发操作失败: " + e.getMessage());
                }
            });
        }

        for (Thread thread : cacheThreads) {
            thread.start();
        }

        for (Thread thread : cacheThreads) {
            thread.join(3000);
        }

        // 清理测试缓存
        for (int i = 0; i < 5; i++) {
            cacheService.delete(testKey + ":" + i);
        }
    }
}