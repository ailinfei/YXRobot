package com.yxrobot.mapper;

import com.yxrobot.entity.CharityInstitution;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mybatis.spring.boot.test.autoconfigure.MybatisTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

/**
 * CharityInstitutionMapper 单元测试
 * 测试公益合作机构数据访问层的数据库操作
 * 
 * @author YXRobot开发团队
 * @version 1.0
 * @since 2024-12-19
 */
@MybatisTest
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
@ActiveProfiles("test")
@Transactional
class CharityInstitutionMapperTest {

    @Autowired
    private CharityInstitutionMapper charityInstitutionMapper;

    private CharityInstitution testInstitution;

    @BeforeEach
    void setUp() {
        // 初始化测试数据
        testInstitution = new CharityInstitution();
        testInstitution.setName("测试小学");
        testInstitution.setType("school");
        testInstitution.setLocation("北京市");
        testInstitution.setAddress("北京市朝阳区测试路123号");
        testInstitution.setContactPerson("张老师");
        testInstitution.setContactPhone("13800138000");
        testInstitution.setEmail("test@school.edu.cn");
        testInstitution.setStudentCount(450);
        testInstitution.setCooperationDate(LocalDate.of(2024, 1, 1));
        testInstitution.setStatus("active");
        testInstitution.setDeviceCount(5);
        testInstitution.setLastAccessDate(LocalDate.now());
        testInstitution.setNotes("测试机构备注");
        testInstitution.setCreateTime(LocalDateTime.now());
        testInstitution.setUpdateTime(LocalDateTime.now());
        testInstitution.setDeleted(0);
    }

    @Test
    void testInsert_Success() {
        // 执行插入操作
        int result = charityInstitutionMapper.insert(testInstitution);

        // 验证插入结果
        assertEquals(1, result);
        assertNotNull(testInstitution.getId());
        assertTrue(testInstitution.getId() > 0);
    }

    @Test
    void testSelectById_Success() {
        // 先插入测试数据
        charityInstitutionMapper.insert(testInstitution);
        Long insertedId = testInstitution.getId();

        // 执行查询操作
        CharityInstitution result = charityInstitutionMapper.selectById(insertedId);

        // 验证查询结果
        assertNotNull(result);
        assertEquals(insertedId, result.getId());
        assertEquals(testInstitution.getName(), result.getName());
        assertEquals(testInstitution.getType(), result.getType());
        assertEquals(testInstitution.getLocation(), result.getLocation());
        assertEquals(testInstitution.getAddress(), result.getAddress());
        assertEquals(testInstitution.getContactPerson(), result.getContactPerson());
        assertEquals(testInstitution.getContactPhone(), result.getContactPhone());
        assertEquals(testInstitution.getEmail(), result.getEmail());
        assertEquals(testInstitution.getStudentCount(), result.getStudentCount());
        assertEquals(testInstitution.getCooperationDate(), result.getCooperationDate());
        assertEquals(testInstitution.getStatus(), result.getStatus());
        assertEquals(testInstitution.getDeviceCount(), result.getDeviceCount());
        assertEquals(testInstitution.getLastAccessDate(), result.getLastAccessDate());
        assertEquals(testInstitution.getNotes(), result.getNotes());
        assertEquals(testInstitution.getDeleted(), result.getDeleted());
    }

    @Test
    void testSelectById_NotFound() {
        // 执行查询不存在的ID
        CharityInstitution result = charityInstitutionMapper.selectById(999L);

        // 验证查询结果
        assertNull(result);
    }

    @Test
    void testUpdateById_Success() {
        // 先插入测试数据
        charityInstitutionMapper.insert(testInstitution);
        Long insertedId = testInstitution.getId();

        // 修改数据
        testInstitution.setName("更新后的测试小学");
        testInstitution.setStudentCount(500);
        testInstitution.setDeviceCount(8);
        testInstitution.setStatus("inactive");
        testInstitution.setUpdateTime(LocalDateTime.now());

        // 执行更新操作
        int result = charityInstitutionMapper.updateById(testInstitution);

        // 验证更新结果
        assertEquals(1, result);

        // 查询验证更新是否成功
        CharityInstitution updated = charityInstitutionMapper.selectById(insertedId);
        assertNotNull(updated);
        assertEquals("更新后的测试小学", updated.getName());
        assertEquals(500, updated.getStudentCount());
        assertEquals(8, updated.getDeviceCount());
        assertEquals("inactive", updated.getStatus());
    }

    @Test
    void testUpdateById_NotFound() {
        // 设置不存在的ID
        testInstitution.setId(999L);

        // 执行更新操作
        int result = charityInstitutionMapper.updateById(testInstitution);

        // 验证更新结果
        assertEquals(0, result);
    }

    @Test
    void testDeleteById_Success() {
        // 先插入测试数据
        charityInstitutionMapper.insert(testInstitution);
        Long insertedId = testInstitution.getId();

        // 执行软删除操作
        int result = charityInstitutionMapper.deleteById(insertedId);

        // 验证删除结果
        assertEquals(1, result);

        // 查询验证软删除是否成功
        CharityInstitution deleted = charityInstitutionMapper.selectById(insertedId);
        assertNotNull(deleted);
        assertEquals(1, deleted.getDeleted()); // 软删除标记
    }

    @Test
    void testDeleteById_NotFound() {
        // 执行删除不存在的ID
        int result = charityInstitutionMapper.deleteById(999L);

        // 验证删除结果
        assertEquals(0, result);
    }

    @Test
    void testSelectByQuery_Success() {
        // 插入多条测试数据
        CharityInstitution institution1 = createTestInstitution("北京小学", "school", "北京市", "active");
        CharityInstitution institution2 = createTestInstitution("上海中学", "school", "上海市", "active");
        CharityInstitution institution3 = createTestInstitution("广州医院", "hospital", "广州市", "inactive");

        charityInstitutionMapper.insert(institution1);
        charityInstitutionMapper.insert(institution2);
        charityInstitutionMapper.insert(institution3);

        // 执行查询操作 - 查询所有学校类型的机构
        List<CharityInstitution> result = charityInstitutionMapper.selectByQuery(
            null, "school", null, null, 0, 10);

        // 验证查询结果
        assertNotNull(result);
        assertEquals(2, result.size());
        assertTrue(result.stream().allMatch(inst -> "school".equals(inst.getType())));
    }

    @Test
    void testSelectByQuery_WithKeyword() {
        // 插入多条测试数据
        CharityInstitution institution1 = createTestInstitution("北京小学", "school", "北京市", "active");
        CharityInstitution institution2 = createTestInstitution("北京中学", "school", "北京市", "active");
        CharityInstitution institution3 = createTestInstitution("上海小学", "school", "上海市", "active");

        charityInstitutionMapper.insert(institution1);
        charityInstitutionMapper.insert(institution2);
        charityInstitutionMapper.insert(institution3);

        // 执行查询操作 - 使用关键词搜索
        List<CharityInstitution> result = charityInstitutionMapper.selectByQuery(
            "北京", null, null, null, 0, 10);

        // 验证查询结果
        assertNotNull(result);
        assertEquals(2, result.size());
        assertTrue(result.stream().allMatch(inst -> inst.getName().contains("北京")));
    }

    @Test
    void testSelectByQuery_WithStatus() {
        // 插入多条测试数据
        CharityInstitution institution1 = createTestInstitution("测试小学1", "school", "北京市", "active");
        CharityInstitution institution2 = createTestInstitution("测试小学2", "school", "北京市", "inactive");
        CharityInstitution institution3 = createTestInstitution("测试小学3", "school", "北京市", "active");

        charityInstitutionMapper.insert(institution1);
        charityInstitutionMapper.insert(institution2);
        charityInstitutionMapper.insert(institution3);

        // 执行查询操作 - 查询活跃状态的机构
        List<CharityInstitution> result = charityInstitutionMapper.selectByQuery(
            null, null, "active", null, 0, 10);

        // 验证查询结果
        assertNotNull(result);
        assertEquals(2, result.size());
        assertTrue(result.stream().allMatch(inst -> "active".equals(inst.getStatus())));
    }

    @Test
    void testSelectByQuery_WithLocation() {
        // 插入多条测试数据
        CharityInstitution institution1 = createTestInstitution("测试小学1", "school", "北京市", "active");
        CharityInstitution institution2 = createTestInstitution("测试小学2", "school", "上海市", "active");
        CharityInstitution institution3 = createTestInstitution("测试小学3", "school", "北京市", "active");

        charityInstitutionMapper.insert(institution1);
        charityInstitutionMapper.insert(institution2);
        charityInstitutionMapper.insert(institution3);

        // 执行查询操作 - 查询北京地区的机构
        List<CharityInstitution> result = charityInstitutionMapper.selectByQuery(
            null, null, null, "北京市", 0, 10);

        // 验证查询结果
        assertNotNull(result);
        assertEquals(2, result.size());
        assertTrue(result.stream().allMatch(inst -> "北京市".equals(inst.getLocation())));
    }

    @Test
    void testSelectByQuery_WithPagination() {
        // 插入多条测试数据
        for (int i = 1; i <= 5; i++) {
            CharityInstitution institution = createTestInstitution("测试小学" + i, "school", "北京市", "active");
            charityInstitutionMapper.insert(institution);
        }

        // 执行查询操作 - 分页查询，每页2条，查询第2页
        List<CharityInstitution> result = charityInstitutionMapper.selectByQuery(
            null, null, null, null, 2, 2);

        // 验证查询结果
        assertNotNull(result);
        assertEquals(2, result.size());
    }

    @Test
    void testCountByQuery_Success() {
        // 插入多条测试数据
        CharityInstitution institution1 = createTestInstitution("北京小学", "school", "北京市", "active");
        CharityInstitution institution2 = createTestInstitution("上海中学", "school", "上海市", "active");
        CharityInstitution institution3 = createTestInstitution("广州医院", "hospital", "广州市", "inactive");

        charityInstitutionMapper.insert(institution1);
        charityInstitutionMapper.insert(institution2);
        charityInstitutionMapper.insert(institution3);

        // 执行计数操作 - 统计所有学校类型的机构
        Long result = charityInstitutionMapper.countByQuery(null, "school", null, null);

        // 验证计数结果
        assertEquals(2L, result);
    }

    @Test
    void testCountByQuery_WithKeyword() {
        // 插入多条测试数据
        CharityInstitution institution1 = createTestInstitution("北京小学", "school", "北京市", "active");
        CharityInstitution institution2 = createTestInstitution("北京中学", "school", "北京市", "active");
        CharityInstitution institution3 = createTestInstitution("上海小学", "school", "上海市", "active");

        charityInstitutionMapper.insert(institution1);
        charityInstitutionMapper.insert(institution2);
        charityInstitutionMapper.insert(institution3);

        // 执行计数操作 - 使用关键词搜索
        Long result = charityInstitutionMapper.countByQuery("北京", null, null, null);

        // 验证计数结果
        assertEquals(2L, result);
    }

    @Test
    void testExistsByName_True() {
        // 先插入测试数据
        charityInstitutionMapper.insert(testInstitution);

        // 执行检查名称是否存在
        boolean result = charityInstitutionMapper.existsByName("测试小学");

        // 验证结果
        assertTrue(result);
    }

    @Test
    void testExistsByName_False() {
        // 执行检查不存在的名称
        boolean result = charityInstitutionMapper.existsByName("不存在的机构");

        // 验证结果
        assertFalse(result);
    }

    @Test
    void testExistsByNameExcludeId_True() {
        // 先插入测试数据
        charityInstitutionMapper.insert(testInstitution);

        // 插入另一条数据
        CharityInstitution another = createTestInstitution("另一个机构", "school", "上海市", "active");
        charityInstitutionMapper.insert(another);

        // 执行检查名称是否存在（排除指定ID）
        boolean result = charityInstitutionMapper.existsByNameExcludeId("测试小学", another.getId());

        // 验证结果
        assertTrue(result);
    }

    @Test
    void testExistsByNameExcludeId_False() {
        // 先插入测试数据
        charityInstitutionMapper.insert(testInstitution);

        // 执行检查名称是否存在（排除自己的ID）
        boolean result = charityInstitutionMapper.existsByNameExcludeId("测试小学", testInstitution.getId());

        // 验证结果
        assertFalse(result);
    }

    @Test
    void testSelectActiveInstitutions_Success() {
        // 插入多条测试数据
        CharityInstitution institution1 = createTestInstitution("活跃机构1", "school", "北京市", "active");
        CharityInstitution institution2 = createTestInstitution("非活跃机构", "school", "上海市", "inactive");
        CharityInstitution institution3 = createTestInstitution("活跃机构2", "hospital", "广州市", "active");

        charityInstitutionMapper.insert(institution1);
        charityInstitutionMapper.insert(institution2);
        charityInstitutionMapper.insert(institution3);

        // 执行查询活跃机构
        List<CharityInstitution> result = charityInstitutionMapper.selectActiveInstitutions();

        // 验证查询结果
        assertNotNull(result);
        assertEquals(2, result.size());
        assertTrue(result.stream().allMatch(inst -> "active".equals(inst.getStatus())));
    }

    @Test
    void testCountActiveInstitutions_Success() {
        // 插入多条测试数据
        CharityInstitution institution1 = createTestInstitution("活跃机构1", "school", "北京市", "active");
        CharityInstitution institution2 = createTestInstitution("非活跃机构", "school", "上海市", "inactive");
        CharityInstitution institution3 = createTestInstitution("活跃机构2", "hospital", "广州市", "active");

        charityInstitutionMapper.insert(institution1);
        charityInstitutionMapper.insert(institution2);
        charityInstitutionMapper.insert(institution3);

        // 执行统计活跃机构数量
        Long result = charityInstitutionMapper.countActiveInstitutions();

        // 验证统计结果
        assertEquals(2L, result);
    }

    @Test
    void testSelectInstitutionsByType_Success() {
        // 插入多条测试数据
        CharityInstitution institution1 = createTestInstitution("小学1", "school", "北京市", "active");
        CharityInstitution institution2 = createTestInstitution("医院1", "hospital", "上海市", "active");
        CharityInstitution institution3 = createTestInstitution("小学2", "school", "广州市", "active");

        charityInstitutionMapper.insert(institution1);
        charityInstitutionMapper.insert(institution2);
        charityInstitutionMapper.insert(institution3);

        // 执行查询指定类型的机构
        List<CharityInstitution> result = charityInstitutionMapper.selectInstitutionsByType("school");

        // 验证查询结果
        assertNotNull(result);
        assertEquals(2, result.size());
        assertTrue(result.stream().allMatch(inst -> "school".equals(inst.getType())));
    }

    @Test
    void testSelectInstitutionsByLocation_Success() {
        // 插入多条测试数据
        CharityInstitution institution1 = createTestInstitution("北京机构1", "school", "北京市", "active");
        CharityInstitution institution2 = createTestInstitution("上海机构", "hospital", "上海市", "active");
        CharityInstitution institution3 = createTestInstitution("北京机构2", "school", "北京市", "active");

        charityInstitutionMapper.insert(institution1);
        charityInstitutionMapper.insert(institution2);
        charityInstitutionMapper.insert(institution3);

        // 执行查询指定地区的机构
        List<CharityInstitution> result = charityInstitutionMapper.selectInstitutionsByLocation("北京市");

        // 验证查询结果
        assertNotNull(result);
        assertEquals(2, result.size());
        assertTrue(result.stream().allMatch(inst -> "北京市".equals(inst.getLocation())));
    }

    /**
     * 创建测试用的CharityInstitution对象
     * 
     * @param name 机构名称
     * @param type 机构类型
     * @param location 地区
     * @param status 状态
     * @return CharityInstitution对象
     */
    private CharityInstitution createTestInstitution(String name, String type, String location, String status) {
        CharityInstitution institution = new CharityInstitution();
        institution.setName(name);
        institution.setType(type);
        institution.setLocation(location);
        institution.setAddress(location + "测试地址");
        institution.setContactPerson("联系人");
        institution.setContactPhone("13800138000");
        institution.setEmail("test@example.com");
        institution.setStudentCount(300);
        institution.setCooperationDate(LocalDate.of(2024, 1, 1));
        institution.setStatus(status);
        institution.setDeviceCount(3);
        institution.setLastAccessDate(LocalDate.now());
        institution.setNotes("测试备注");
        institution.setCreateTime(LocalDateTime.now());
        institution.setUpdateTime(LocalDateTime.now());
        institution.setDeleted(0);
        return institution;
    }
}